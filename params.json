{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Vein","body":"![status](https://secure.travis-ci.org/wearefractal/vein.png?branch=master)\r\n\r\n## Information\r\n\r\n<table>\r\n<tr>\r\n<td>Package</td>\r\n<td>vein</td>\r\n</tr>\r\n<tr>\r\n<td>Description</td>\r\n<td>RPC via WebSockets</td>\r\n</tr>\r\n<tr>\r\n<td>Node Version</td>\r\n<td>>= 0.6</td>\r\n</tr>\r\n</table>\r\n\r\nVein uses ES5 features so be sure to include es5shim on your page.\r\n\r\n## Example\r\n\r\n### Server\r\n\r\n```javascript\r\nvar Vein = require('vein');\r\nvar server = http.createServer().listen(8080);\r\nvar vein = Vein.createServer(server);\r\n\r\nvein.add('multiply', function (res, numOne, numTwo){\r\n  res.reply(numOne * numTwo);\r\n});\r\n```\r\n\r\n### Client\r\n\r\n```javascript\r\nvar vein = Vein.createClient();\r\nvein.ready(function (services){\r\n  vein.multiply(2, 5, function (num){\r\n    // num === 10\r\n  });\r\n});\r\n```\r\n\r\n## Server Usage\r\n\r\n### Create\r\n\r\n```\r\n-- Options --\r\nresource - change to allow multiple servers on one port (default: \"default\")\r\n```\r\n\r\n```javascript\r\nvar Vein = require('vein');\r\nvar vein = Vein.createServer(httpServer, {options});\r\n```\r\n\r\n### Adding services\r\n\r\nArguments passed to res.reply() will be applied to the callback on the client\r\n\r\n```javascript\r\nvein.add('getNumber', function (res, name, num) {\r\n  res.reply(\"Hey there \" + name + \" I got your number \" + num);\r\n});\r\n```\r\n\r\n### Middleware\r\n\r\nYou can use middleware to add layers in front of your services. Any arguments passed into next will be thrown as an error on the client and end the middleware chain.\r\n\r\n```javascript\r\nvein.use(function(req, res, next){\r\n  if (req.service == 'login') {\r\n    next();\r\n  } else {\r\n    if (res.cookie('login') == 'success!') {\r\n      next();\r\n    } else {\r\n      res.disconnect();\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### Testing\r\n\r\nVein supports calling the res object as a function. This makes it easier to integrate vanilla-JS services into vein. The only difference is that you still have to put the callback first (this is to prevent headaches with variable arguments from the client).\r\n\r\n```javascript\r\nvein.add('echoUser', function (res, username, password) {\r\n  res(username, password);\r\n});\r\n```\r\n\r\n## Client Usage\r\n\r\n### Create\r\n\r\n```\r\n-- Options --\r\nhost - server location (default: window.location.hostname)\r\nport - server port (default: window.location.port)\r\nsecure - use SSL (default: window.location.protocol)\r\nresource - change to allow multiple servers on one port (default: \"default\")\r\n```\r\n\r\n```javascript\r\nvar vein = Vein.createClient({options});\r\n```\r\n\r\n### Ready\r\n\r\nWhen the connection has been established your callback will be called with an array of services available.\r\n\r\n```javascript\r\nvein.on('ready', function (services) {\r\n  //Start doing stuff!\r\n});\r\n```\r\n\r\n### Calling services\r\n\r\nWhen calling a service the format is vein.serviceName(args..., callback)\r\n\r\n```javascript\r\nvein.getNumber('john', 2, function (msg) {\r\n  console.log(msg);\r\n});\r\n```\r\n  \r\n### Close\r\n\r\nIf the connection has been closed this will be called.\r\n\r\n```javascript\r\nvein.on('close', function (reason) {\r\n  console.log(\"Connection lost due to\", reason);\r\n});\r\n```\r\n\r\n## Examples\r\n\r\nYou can view a tiny addition sample and more in the [example folder.](https://github.com/wearefractal/vein/tree/master/examples)\r\n\r\n## LICENSE\r\n\r\n(MIT License)\r\n\r\nCopyright (c) 2012 Fractal <contact@wearefractal.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","tagline":"RPC via WebSockets","google":""}